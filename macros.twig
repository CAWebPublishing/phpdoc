{% macro correct_default(__value) %}
{% set val = __value|trim %}
{% set val = val matches '/rue/' ? "true" : val %}
{% set val = val matches '/ull/' ? "null" : val %}
{% set val = val matches '/alse/' ? "false" : val %}
{{ val~';' }}
{% endmacro %}
{{ project.settings.custom['wp_hook_ref'] }}

{% macro github_file_link(__prop) %}
{% set __settings = project.settings.custom %}
{% set __link = __settings['github_ref'] ~ __settings['github_user'] ~ '/CAWeb/blob/' ~ __settings['github_branch'] ~ '/' %}
{% set __path = __prop.file.path %}
{% set __line = __prop.line %}
<a target="_blank" href="{{ __link ~ __path ~ '#L' ~ __line }}">{{ __path }}</a>:{{ __line }}
{% endmacro  %}

{% macro wp_hook_link(__link, __action) %}
{% set __settings = project.settings.custom %}
{% set __link = __settings['wp_hook_ref'] ~ __link  %}
<a target="_blank" href="{{ __link }}">{{ __action }}</a>
{% endmacro  %}

{% macro wordpress_hooks(__classes = false, __hook = 'action') %}
{{ wp_hook_ref }}
{# iterate thru all project files #}
{% for __obj in project.files|sort_asc %}
    {% set functions = [] %}

    {# iterate thru all file functions #}
    {% for __f in __obj.functions|sort_asc %}
        {# Save function information #}
        {% set functions = functions|merge([__f]) %}
    {% endfor %}

    {# if including classes #}
    {% if __classes %}
        {# iterate thru classes in the file  #}
        {% for __class in __obj.classes|sort_asc %}
            {# iterate thru class methods #}
            {% for __c in __class.methods|sort_asc %}
                {# Save function information #}
                {% set functions = functions|merge([__c]) %}
            {% endfor %}
        {% endfor %}
    {% endif %}

    {# iterate thru all functions #}
    {% for __f in 0..functions|length %}
        {% set is_action = '' %}
        {# iterate thru function tags, if function has category tag reference save it #}
        {% for tag_name,tags in functions[__f].tags if tag_name in ['category'] %}
            {% set is_action = tags.0.description %}
        {% endfor %}
        
        {# if category tag was found #}
        {% if is_action is not empty %}
            {# get all hooks in description #}
            {% set __hooks = '{' == is_action|first ? is_action|slice(1, is_action|length - 2 )|trim : is_action %}
            {% set __hooks = __hooks|split('\n') %}

            {% if __hooks|length > 0 %}
                {# iterate over category entries #}
                {% for __entry in __hooks %}
                    {# if entry matches hook #}
                    {% if "add_" ~ __hook == __entry|slice(0,10) %}
                        {# get action_hook from entry #}
                        {% set __entry = __entry|slice(("add_" ~ __hook)|length + 1) %}
                        {% set __wp_action = __entry|split(',')[0] %}
            
                        {% set __entry = __entry|replace({ (__wp_action ~ ',') : ""}) %}
                        {% set __wp_action = __wp_action|replace({"'" : ""})|trim %}
                        {% set __wp_action_link = __wp_action %}
            
                        {# if action has caweb_ action request, correct action and link replacing caweb_ with action #}
                        {% if __wp_action matches '/caweb_/' %}
                            {% set __wp_action_link = __wp_action|split('caweb_')[0] ~ 'action' %}
                            {% set __wp_action = __wp_action|split('caweb_')[0] ~ '{$action}' %}
                        {% endif %}

                        {# get action callback function from entry #}
                        {% set __callback = "'" == __entry|trim|first ? __entry|trim|slice(1)|split("'")[0] : __entry|split(')')[0] ~ ')' %}
                        {% set __entry = "'" == __entry|trim|first ? __entry|replace({ ("'" ~ __callback ~ "'") : ""}) : __entry|replace({ (__callback) : ""}) %}

                        {# get action priority and argument count from entry #}
                        {% set __priority = __entry|split(',')[1] is not empty ? __entry|split(',')[1] : '10' %}
                        {% set __arg_count = __entry|split(',')[2] is not empty ? __entry|split(',')[2]|replace({')' : '', ';' : ''}) : '' %}

                        <div class="border-bottom border-info mb-3">
                            <p>WordPress Hook: {{ _self.wp_hook_link(__wp_action_link, __wp_action) }}</p>

                            {% if functions[__f].description is not empty %}
                            <p>Description: {{ functions[__f].description }}</p>
                            {% endif %}
                            
                            <p>Callback Function: {{ __callback }}</p>
                            
                            <p>Priority: {{ __priority|replace({')' : '', ';' : ''}) }}</p>
                            
                            {% if functions[__f].description is not empty %}
                            <p>Arguments: {{ __arg_count }}</p>
                            {% endif %}
                            
                            <p>Source: {{ _self.github_file_link(functions[__f]) }}</p>
                        </div>

                    {% endif %}

                {% endfor %}
            {% endif %}
        {% endif %}

    {% endfor %}

{% endfor %}

{% endmacro %}
